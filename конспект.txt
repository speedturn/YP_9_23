Функции и параметры
При разработке большинства приложений их разделяют на функциональные модули
В C# приложение состоит из классов которые содержат именованные блоки кода, называемыми методами
Метод (Функция) - это часть класса, который может осуществлять действия или вычислять значения
Использование методов
Метод - это набор операторов, которые выполняются вместе
Для создания метода необходимо задать его имя, определить список параметров и тело метода
Для вызова метода другого класса необходимо, чтобы он был объявлен как public
Вызов осуществляется по имени класса и метода
Если метод не void, то необходимо вернуть значение соответствующего типа
Оператор return останавливает выполнение метода и передает отправление вызвавшему данный метод оператору
Каждый метод имеет набор своих локальных переменных
Они видны только в нем, и при завершении работы метода уничтожаются
Для того чтобы переменные были видны в нескольких методах класса, необходимо объявить их полями вне метода, но внутри класса
Для не void методов необходимо возвращать значение каждый "путь выполнения" метода должен заканчиваться оператором return
Для void методов оператор return необязателен
Использование параметров
Параметры позволяют передавать информацию из одного метода в другой
При объявлении метода можно задать список его параметров, если список пустой, то это означает что метод не имеет параметров
В C# существуют 3 варианта передачи параметров:
По значению
(Изменение значения параметра в методе не влияет на значение в вызвавшем методе)
По ссылке
(Необходимо указывать ключевое слово ref)
Выходные параметры
До вызова метода необходимо обязательно инициализировать переменные
В C# позволяет использовать механизм передачи списка параметров изменяемой длины
Для этого используется ключевое слово params
Модификаторы доступа - это ключевые слова, которые задают объявленный уровень доступности члена или типа
7 уровней специальных возможностей модификаторов доступа
public: доступ неограничен
protected: доступ ограничен содержащим классом или типами, которые являются производными от содержащего класса
internal: доступ ограничен текущей сборкой
protected internal
private: доступ ограничен содержащим типом
private protected
file: объявленный тип отображается только в текущем исходном файле
Модификатор Abstract - указывает, что изменяемый элемент имеет отсутствующую или неполную реализацию
Модификатор Async - позволяет указать, что метод является синхронным
Модификатор Static - можно добавить локальную функцию, используется для объявления статического члена, принадлежащего собственному типу, а не конкретному объекту